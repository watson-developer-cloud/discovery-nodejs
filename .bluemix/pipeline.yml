---
stages:
- name: Build
  inputs:
  - type: git
    branch: master
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: npm
    script: |
      #!/bin/bash
      export PATH=/opt/IBM/node-v6.7.0/bin:$PATH
      npm install
      npm run build
- name: Deploy
  inputs:
  - type: job
    stage: Build
    job: Build
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: CF_INSTANCES
    value: '5'
    type: text
  - name: CF_MEMORY
    value: 512M
    type: text
  - name: DISCOVERY_SERVICE_NAME
    value: Discovery-Demo
    type: text
  - name: TEMP_APP_NAME
    value: ''
    type: text
  - name: TEMP_APP_URL
    value: ''
    type: text
  - name: ROUTE_DOMAIN
    value: mybluemix.net
    type: text
  jobs:
  - name: Deploy Dark
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      #set -x
      #CF_TRACE=true

      # create services that do not exist

      if ! cf service ${DISCOVERY_SERVICE_NAME} ; then
        cf create-service discovery standard ${DISCOVERY_SERVICE_NAME}
      fi

      # Compute a unique app name using the reserved CF_APP name (configured in the
      # deployer or from the manifest.yml file) and the build number

      export TEMP_APP_NAME="${CF_APP}-${BUILD_NUMBER}"

      # write out manifest.yml
      echo "Writing manifest.yml..."

      cat > ./manifest.yml <<EOL
      name: ${TEMP_APP_NAME}
      domain: ${ROUTE_DOMAIN}
      instances: ${CF_INSTANCES}
      memory: ${CF_MEMORY}
      command: node server.js
      services:
        - ${DISCOVERY_SERVICE_NAME}

      EOL

      echo "Manifest file written"

      cat ./manifest.yml

      echo "Pushing new app:$TEMP_APP_NAME"
      cf push $TEMP_APP_NAME
      export TEMP_APP_URL="https://${TEMP_APP_NAME}.${ROUTE_DOMAIN}"

      echo "##############################################################"
      echo "Deployed new app $TEMP_APP_NAME"
      echo "on temporary route: $TEMP_APP_URL"
      echo "##############################################################"

      # View logs
      #cf logs "${TEMP_APP_NAME}" --recent
  - name: Test
    type: tester
    script: |-
      #!/bin/bash

      max_health_checks=20
      expected_response="200"

      ENDPOINT="${TEMP_APP_URL}/api/query"

      echo "Testing endpoint: ${ENDPOINT} with POST"

      HTTP_RESPONSE=$(curl -k -I -X POST -sL "${ENDPOINT}")

      echo "$HTTP_RESPONSE"

      HTTP_STATUS=$(echo "$HTTP_RESPONSE" | head -n 1| cut -d $' ' -f2)

      echo "Check that the new app is ready to serve..."
      iterations=0
      while [[ "${iterations}" -lt "${max_health_checks}" ]]
      do
        if [[ "${HTTP_STATUS}" == "${expected_response}" ]]; then
          echo "Got expected ${HTTP_STATUS} status"
          break
        else
          iterations=$(( iterations + 1 ))
          sleep 3
          echo "Waiting for ${expected_response} response... Got ${HTTP_RESPONSE} (${iterations}/${max_health_checks})"
        fi
      done

      if [[ "${iterations}" == "${max_health_checks}" ]]; then
        echo "Couldn't get ${expected_response} response. Reverting..."
        # Delete temporary route
        cf delete-route $ROUTE_DOMAIN -n $TEMP_APP_NAME -f
        # Stop temporary app
        cf stop $TEMP_APP_NAME
        exit 1
      fi
      echo "##############################################################"
      echo "Sanity checked new app $TEMP_APP_NAME"
      echo "on temporary route: $TEMP_APP_URL"
      echo "##############################################################"
  - name: Rollout
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      #set -x
      #CF_TRACE=true

      cf app $TEMP_APP_NAME

      # Map traffic to the new version by binding to the public host.
      # NOTE: The old version(s) is still taking traffic to avoid disruption in service.
      cf map-route $TEMP_APP_NAME $ROUTE_DOMAIN --hostname $CF_APP
      cf routes | { grep $TEMP_APP_NAME || true; }

      # Delete the temporary route that was used for testing since it is no longer needed.
      cf unmap-route $TEMP_APP_NAME $ROUTE_DOMAIN -n $TEMP_APP_NAME
      cf delete-route $ROUTE_DOMAIN -n $TEMP_APP_NAME -f

      # Delete the old app at this point. They are no longer needed.
      cf delete -f $CF_APP

      # Rename temp app now it is public
      cf rename $TEMP_APP_NAME $CF_APP

      echo "Public route bindings:"
      cf routes | { grep $CF_APP || true; }
      cf app $CF_APP
      export APP_URL=https://$(cf app $CF_APP | grep routes: | awk '{print $2}')
      echo "##############################################################"
      echo "You have successfully executed a rolling deployment of $CF_APP"
      echo "at: $APP_URL"
      echo "##############################################################"
      # View logs
      #cf logs "${CF_APP}" --recent
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api-integration.ng.bluemix.net/v1/messaging/webhook/publish
